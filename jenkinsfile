// Jenkinsfile

pipeline {
    agent any

    environment {
        // Replace with your Docker Hub username
        DOCKER_HUB_USERNAME = 'your_docker_hub_username'
        // Replace with the ID of the Docker Hub credential you created in Jenkins
        DOCKER_HUB_CREDENTIALS_ID = 'dockerhub-credentials'
        // Replace with your Docker image name (e.g., nextjs-app)
        IMAGE_NAME = 'your_docker_hub_username/nextjs-app' // Example: yourusername/my-nextjs-app
    }

    stages {
        stage('Checkout Code') {
            steps {
                // Pulls the latest code from your GitHub repository
                git branch: 'main', url: "https://github.com/${env.GITHUB_USER}/${env.GITHUB_REPO}.git"
                // NOTE: For simple public repos, Jenkins might auto-fill GITHUB_USER/GITHUB_REPO from project settings.
                // If this fails, replace with: url: "https://github.com/YOUR_USERNAME/YOUR_REPO_NAME.git"
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build the Docker image, tag with Jenkins build number and 'latest'
                    sh "docker build -t ${IMAGE_NAME}:${BUILD_NUMBER} ."
                    sh "docker build -t ${IMAGE_NAME}:latest ." // Also tag as latest
                }
            }
        }

        stage('Login to Docker Hub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: "${DOCKER_HUB_CREDENTIALS_ID}", passwordVariable: 'DOCKER_HUB_PASSWORD', usernameVariable: 'DOCKER_HUB_USER')]) {
                        sh "echo $DOCKER_HUB_PASSWORD | docker login -u $DOCKER_HUB_USER --password-stdin"
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    sh "docker push ${IMAGE_NAME}:${BUILD_NUMBER}"
                    sh "docker push ${IMAGE_NAME}:latest"
                }
            }
        }

        stage('Deploy Docker Container') {
            steps {
                script {
                    // Check if a container with this name already exists and stop/remove it
                    sh """
                        if docker ps -a | grep -q nextjs-app-container; then
                            echo "Stopping existing container..."
                            docker stop nextjs-app-container || true
                            echo "Removing existing container..."
                            docker rm nextjs-app-container || true
                        fi

                        echo "Pulling latest image from Docker Hub..."
                        docker pull ${IMAGE_NAME}:latest

                        echo "Running new container..."
                        docker run -d -p 80:3000 --name nextjs-app-container ${IMAGE_NAME}:latest

                        echo "Deployment complete! App should be available on port 80."
                    """
                }
            }
        }
    }

    post {
        always {
            // Ensure Docker logout on Jenkins server
            sh "docker logout"
        }
        failure {
            echo 'Pipeline failed. Check build logs.'
        }
        success {
            echo 'Pipeline finished successfully!'
        }
    }
}